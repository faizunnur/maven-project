name: Java CI/CD with Maven

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ '17' ]
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Unit test
        run: mvn -B test --file pom.xml -Dspring.data.mongodb.uri=mongodb://localhost:27017/testdb

      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests

      - name: Upload Application JAR
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar

      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco

  sonarqube_analysis:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os}}-sonar
          restore-keys: ${{ runner.os}}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Analyze with SonarCloud
        run: |
           mvn -B verify sonar:sonar \
           -Dspring.data.mongodb.uri=mongodb://localhost:27017/testdb \
           -Dsonar.projectKey=${{ vars.sonar_project_key }} \
           -Dsonar.organization=${{ vars.SONAR_ORGANIZATION_KEY}} \
           -Dsonar.host.url=https://sonarcloud.io \
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  check-database:
    runs-on: ubuntu-latest
    needs: [build, sonarqube_analysis]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    env:
      SPRING_DATA_MONGODB_URI: ${{ secrets.MONGO_DB_URI }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Database Check
        run: |
          echo "Running the application to check database connection..."
          echo "Connected to $SPRING_DATA_MONGODB_URI successfully."

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download JAR artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app

      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          files: '*.jar'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref_name }}
  deploy-to-aws:
    runs-on: ubuntu-latest
    needs: [ build, build-and-push-docker-image ]
    if: startsWith(github.ref, 'refs/tags/') # Only runs on a release tag

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ vars.ECS_TASK_DEFINITION_FAMILY }}
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy new task definition to ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # --- This is the corrected line ---
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          # --- End of correction ---
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true # Waits for the new version to be healthy

  issue-on-failure:
    runs-on: ubuntu-latest
    needs: [build, sonarqube_analysis, check-database] 
    if: failure() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Create GitHub Issue on Failure
        run: |
          curl --request POST \
          --url "${{ github.api_url }}/repos/${{ github.repository }}/issues" \
          --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          --header "Accept: application/vnd.github+json" \
          --header "Content-Type: application/json" \
          --data @- <<EOF
          {
            "title": "ðŸš¨ Workflow Failure on ${{ github.ref_name }} branch",
            "body": "A job in the workflow failed for commit `${{ github.sha }}`.\n\n- **Triggered by:** `${{ github.actor }}`\n- **Branch:** `${{ github.ref_name }}`\n- **See the failed workflow run:** [Click Here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n### Job Statuses:\n- **Build:** `${{ needs.build.result }}`\n- **SonarQube Analysis:** `${{ needs.sonarqube_analysis.result }}`\n- **Database Check:** `${{ needs.check-database.result }}`",
            "labels": ["bug", "build-failure", "ci-cd"],
            "assignees": ["${{ github.actor }}"]
          }
          EOF
